C51 COMPILER V9.53.0.0   ALGO_SENSOR_PROCESSING_MAIN                                       07/24/2018 00:56:20 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE ALGO_SENSOR_PROCESSING_MAIN
OBJECT MODULE PLACED IN .\src\algo_sensor_processing_main.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\Raph\De
                    -sktop\bck\simplicity backup\algo_sensor_processing\src\algo_sensor_processing_main.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(L
                    -ARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:/Users/Raph/
                    -Desktop/bck/simplicity backup/algo_sensor_processing/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.2//
                    -Device/shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.2//Device/EFM8BB1/inc) PRINT(.\src\
                    -algo_sensor_processing_main.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\algo_sensor_processing_main.OBJ)

line level    source

   1          //-----------------------------------------------------------------------------
   2          // Includes
   3          //-----------------------------------------------------------------------------
   4          #include <SI_EFM8BB1_Register_Enums.h>                  // SFR declarations
   5          #include "InitDevice.h"
   6          // $[Generated Includes]
   7          // [Generated Includes]$
   8          
   9          #include"algo_sensor_processing.h"
  10          
  11          
  12          //-----------------------------------------------------------------------------
  13          // Global Variables
  14          //-----------------------------------------------------------------------------
  15          // Global holder for SMBus data.
  16          // All receive data is written here
  17          // NUM_BYTES_WR used because an SMBus write is Master->Slave
  18          uint8_t xdata SMB_DATA_IN[20];
  19          
  20          // Global holder for SMBus data.
  21          // All transmit data is read from here
  22          // NUM_BYTES_RD used because an SMBus read is Slave->Master
  23          uint8_t xdata SMB_DATA_OUT[20];
  24          
  25          bool I2C_DATA_READY = 0;                    // Set to '1' by the SMBus ISR
  26                                                      // when a new data byte has been
  27                                                                                                  // received.
  28          bool I2C_SET_REGISTER =0;
  29          bool TICK_100MS = 0;                                            // Flag timer cadencé à 100mS = 0;
  30          
  31          
  32          bool StartSonarMeasure=0;                                       // Initie la mesure ultrasons
  33          
  34          // Définition des variables propre au hardware
  35          
  36          struct din DIN3;                                // p.e. capteur IR arrière
  37          struct din DIN1;                                // p.e. capteur IR avant
  38          struct counter CNT_IN_3;                        // p.e. Capteur roue droit
  39          struct counter CNT_IN_4;                        // p.e. Capteur roue gauche
  40          struct din DIN2;                                // p.e. Capteur Avant droit
  41          struct din DIN0;                                // p.e. Capteur Avant gauche
  42          struct ain BATTERY;                                     // p.e. Batterie système
  43          struct sonar SONAR;                                     // p.e. Capteur ultrasons
  44          
  45          
  46          //-----------------------------------------------------------------------------
  47          // main() Routine
  48          // ----------------------------------------------------------------------------
  49          int main (void)
  50          {
  51   1              int i;
C51 COMPILER V9.53.0.0   ALGO_SENSOR_PROCESSING_MAIN                                       07/24/2018 00:56:20 PAGE 2   

  52   1              unsigned char temp;
  53   1              /*
  54   1              unsigned int CAP0;
  55   1              unsigned int CAP1;
  56   1      */
  57   1      
  58   1              // INITIALISATION DES PARAMETRE DE PERIPHERIQUE
  59   1              DIN3.enable=1;                  // activation de la lecture de l'entrée
  60   1              DIN1.enable=1;                  // activation de la lecture de l'entrée
  61   1              DIN2.enable=1;                  // activation de la lecture de l'entrée
  62   1              DIN0.enable=1;
  63   1      
  64   1              CNT_IN_3.enable=1;                      // activation de la lecture de l'entrée
  65   1              CNT_IN_3.pulses=0;
  66   1      
  67   1              CNT_IN_4.enable=1;                      // activation de la lecture de l'entrée
  68   1              CNT_IN_4.pulses=0;
  69   1      
  70   1      
  71   1              BATTERY.enable=1;                       // activation de la lecture de l'entrée
  72   1              BATTERY.mean_count=10;          // moyennage sur 10 mesure
  73   1      
  74   1              SONAR.enable=1;                         // activation de la mesure ultrasons
  75   1              SONAR.mean_count=5;                     // moyennage sur 5 mesures
  76   1      
  77   1              // Call hardware initialization routine
  78   1              enter_DefaultMode_from_RESET();
  79   1      
  80   1      
  81   1        // Initialize the outgoing data array in case a read is done before a
  82   1         // write
  83   1      
  84   1         for (i = 0; i < 10; i++)
  85   1         {
  86   2                SMB_DATA_OUT[i] = 0xEE;
  87   2         }
  88   1      
  89   1         while(1)
  90   1         {
  91   2      
  92   2                 // RECEPTION D'UNE REQUETE EN PROVENANCE DU MASTER I2C
  93   2                if(I2C_DATA_READY){
  94   3      
  95   3                        if(I2C_SET_REGISTER){
  96   4                                switch(SMB_DATA_IN[0]){
  97   5                                      case CTRL_REG : DIN0.enable = SMB_DATA_IN[1] & 0x01;
  98   5                                                                      DIN1.enable = SMB_DATA_IN[1] & 0x02;
  99   5                                                                      DIN2.enable = SMB_DATA_IN[1] & 0x04;
 100   5                                                                      DIN3.enable = SMB_DATA_IN[1] & 0x08;
 101   5                                                                      SONAR.enable = SMB_DATA_IN[1] & 0x10;
 102   5                                                                      BATTERY.enable = SMB_DATA_IN[1] & 0x20;
 103   5                                                                      CNT_IN_3.enable = SMB_DATA_IN[1] & 0x40;
 104   5                                                                      CNT_IN_4.enable = SMB_DATA_IN[1] & 0x80;
 105   5                                                                      break;
 106   5                                      default: break;
 107   5                                }
 108   4                        }
 109   3                        else{
 110   4                                // lecture des registres
 111   4                                switch(SMB_DATA_IN[0]){
 112   5      
 113   5                                        case BOARD_TYPE : SMB_DATA_OUT[0] = 0x11; break;
 114   5                                        case MCU_FIRMWARE : SMB_DATA_OUT[0] = 0x0B; break;
C51 COMPILER V9.53.0.0   ALGO_SENSOR_PROCESSING_MAIN                                       07/24/2018 00:56:20 PAGE 3   

 115   5      
 116   5                                        case CTRL_REG :       temp=0;
 117   5                                                                              temp = temp + ((CNT_IN_4.enable & 0x01)<<7);
 118   5                                                                              temp = temp + ((CNT_IN_3.enable & 0x01)<<6);
 119   5                                                                              temp = temp + ((BATTERY.enable & 0x01)<<5);
 120   5                                                                              temp = temp + ((SONAR.enable & 0x01)<<4);
 121   5                                                                              temp = temp + ((DIN3.enable & 0x01)<<3);
 122   5                                                                              temp = temp + ((DIN2.enable & 0x01)<<2);
 123   5                                                                              temp = temp + ((DIN1.enable & 0x01)<<1);
 124   5                                                                              temp = temp + ((DIN0.enable & 0x01));
 125   5                                                                              SMB_DATA_OUT[0] = temp; break;
 126   5      
 127   5                                        case DIN_STATE :        temp=0;
 128   5                                                                                temp = temp +(DIN3.value & 0x01)<<3;
 129   5                                                                                temp = temp + ((DIN2.value & 0x01)<<2);
 130   5                                                                                temp = temp + ((DIN1.value & 0x01)<<1);
 131   5                                                                                temp = temp + ((DIN0.value & 0x01));
 132   5                                                                                SMB_DATA_OUT[0] = temp; break;
 133   5      
 134   5                                        case SONAR_L : SMB_DATA_OUT[0] = SONAR.dist_inst_mm & 0x00FF; break;
 135   5                                        case SONAR_H : SMB_DATA_OUT[0] = (SONAR.dist_inst_mm & 0xFF00)>>8;  break;
 136   5                                        case SONAR_MEAN_L : SMB_DATA_OUT[0] = SONAR.dist_mean_mm & 0x00FF; break;
 137   5                                        case SONAR_MEAN_H : SMB_DATA_OUT[0] = (SONAR.dist_mean_mm & 0xFF00)>>8;  break;
 138   5      
 139   5                                        case BATT_L : SMB_DATA_OUT[0] = BATTERY.voltage_inst_mV & 0x00FF; break;
 140   5                                        case BATT_H : SMB_DATA_OUT[0] = (BATTERY.voltage_inst_mV & 0xFF00)>>8; break;
 141   5                                        case BATT_MEAN_L : SMB_DATA_OUT[0] = BATTERY.voltage_mean_mV & 0x00FF; break;
 142   5                                        case BATT_MEAN_H : SMB_DATA_OUT[0] = (BATTERY.voltage_mean_mV & 0xFF00)>>8; break;
 143   5      
 144   5      
 145   5                                        case FRQ_1 : SMB_DATA_OUT[0] = CNT_IN_3.frequency; break;
 146   5                                        case FRQ_2 : SMB_DATA_OUT[0] = CNT_IN_4.frequency; break;
 147   5      
 148   5                                        case CNT_1_L : SMB_DATA_OUT[0] = CNT_IN_3.pulses & 0x00FF; break;
 149   5                                        case CNT_1_H : SMB_DATA_OUT[0] = (CNT_IN_3.pulses & 0xFF00)>>8; break;
 150   5      
 151   5                                        case CNT_2_L : SMB_DATA_OUT[0] = CNT_IN_4.pulses & 0x00FF; break;
 152   5                                        case CNT_2_H : SMB_DATA_OUT[0] = (CNT_IN_4.pulses & 0xFF00)>>8; break;
 153   5      
 154   5                                        case CNT_1_CLEAR : TH0=TL0=0; break;
 155   5                                        case CNT_2_CLEAR : TH1=TL1=0; break;
 156   5      
 157   5                                        default       :       SMB_DATA_OUT[0] = 0xDD; break;
 158   5                                }
 159   4                        }
 160   3                        I2C_DATA_READY = 0;
 161   3                }
 162   2      
 163   2                if(TICK_100MS){
 164   3      
 165   3                        // Capteur actif à l'état bas
 166   3      
 167   3                        if(DIN0.enable)
 168   3                                DIN0.value=DIG_HYS_2;
 169   3                        if(DIN1.enable)
 170   3                                DIN1.value=!DIG_IN_2;
 171   3                        if(DIN2.enable)
 172   3                                DIN2.value=DIG_HYS_1;
 173   3                        if(DIN3.enable)
 174   3                                DIN3.value=!DIG_IN_1;
 175   3      
 176   3                        // Démarre une mesure ultrasons
 177   3                        if(SONAR.enable)
C51 COMPILER V9.53.0.0   ALGO_SENSOR_PROCESSING_MAIN                                       07/24/2018 00:56:20 PAGE 4   

 178   3                                StartSonarMeasure = 1;
 179   3      
 180   3                        // Démarre une conversion AD si activée
 181   3                        if(BATTERY.enable==1)
 182   3                                ADC0CN0_ADBUSY=1;             // Démarre la conversion¨
 183   3      
 184   3                        // Mise à jour des registre compteurs
 185   3                        CNT_IN_3.pulses = 0;
 186   3                        CNT_IN_3.pulses = TH0;
 187   3                        CNT_IN_3.pulses = (CNT_IN_3.pulses << 8) + TL0;
 188   3      
 189   3                        CNT_IN_4.pulses = 0;
 190   3                        CNT_IN_4.pulses = TH1;
 191   3                        CNT_IN_4.pulses = (CNT_IN_4.pulses << 8) + TL1;
 192   3      
 193   3                        TICK_100MS=0;                 // Reset 100mS
 194   3                }
 195   2         }
 196   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    561    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     40    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     32       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
